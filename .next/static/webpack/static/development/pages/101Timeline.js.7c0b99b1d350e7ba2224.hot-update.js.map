{"version":3,"file":"static/webpack/static\\development\\pages\\101Timeline.js.7c0b99b1d350e7ba2224.hot-update.js","sources":["webpack:///./components/Usecase.js","webpack:///./pages/101Timeline.js"],"sourcesContent":["import React from 'react';\r\n// import './App.css';\r\nimport * as d3Scale from \"d3-scale\";\r\nimport * as d3Selection from \"d3-selection\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\nclass UseCaseRow extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.rowName=this.props.name;\r\n        this.createItems=this.createItems.bind(this);\r\n        this.removeItems = this.removeItems.bind(this);\r\n        this.createInfo=this.createInfo.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.createItems();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.removeItems();\r\n        this.createItems();\r\n    }\r\n\r\n    removeItems(){\r\n        d3Selection.select(`#${this.rowName}`).selectAll(\"*\").remove();\r\n        d3Selection.select(`#${this.rowName}`).append(\"rect\")\r\n            .classed(\"border\",true)\r\n            .attr(\"width\",this.props.width+150)\r\n            .attr(\"height\",140);\r\n    }\r\n    createItems(){\r\n        const data = this.props.data.filter(\r\n            ele=> moment(ele.date).isBetween(this.props.start,this.props.end));\r\n        const scale = d3Scale.scaleTime()\r\n            .domain([this.props.start,this.props.end])\r\n            .range([135,this.props.width+135]);\r\n\r\n        d3Selection.select(`#${this.rowName}`)\r\n            .selectAll(\"rect[class = rowImg]\")\r\n            .data(data)\r\n            .enter()\r\n            .append('text')\r\n            .classed(\"fas\",true)\r\n            .text(d=>{\r\n                if(d.tutor.includes(\"Jeff\"))\r\n                    return '\\uf6d5'; //dragon\r\n                else if(d.tutor.includes(\"Julia\"))\r\n                    return '\\uf6be'; //cat\r\n                else if(d.tutor.includes(\"ella\"))\r\n                    return '\\uf094'; // lemon\r\n                else if(d.tutor.includes(\"Alex\"))\r\n                    return '\\uf6d3'; // dog\r\n                else if(d.tutor.includes(\"Alan\"))\r\n                    return '\\uf4ba'; //bird\r\n                else if(d.tutor.includes(\"Hari\"))\r\n                    return '\\uf7ef'; //cheese\r\n                else if(d.tutor.includes(\"Ilias\"))\r\n                    return '\\uf6ed'; //hippo\r\n                else if(d.tutor.includes(\"Aashish\"))\r\n                    return '\\uf6f0'; //horse\r\n                else if(d.tutor.includes(\"Gilad\"))\r\n                    return '\\uf700'; //frog\r\n                else if(d.tutor.includes(\"Cindy\"))\r\n                    return '\\uf717'; //spider\r\n                else if(d.tutor.includes(\"Jonathan\"))\r\n                    return '\\uf5d1'; //apple\r\n                else if(d.tutor.includes(\"Santiago\"))\r\n                    return '\\uf7ec'; //toast\r\n                else if(d.tutor.includes(\"Rahul\"))\r\n                    return '\\uf578'; //fish\r\n                else\r\n                    return '\\uf563'; //cookie\r\n            })\r\n            .attr(\"x\",d=> scale(moment(d.date)))\r\n            .attr('y',(d,i)=>(15+(30*i%150)))\r\n            .attr('width',40)\r\n            .attr('height',40)\r\n            .attr(\"fill\",d =>{\r\n                if(d.resolve===undefined)\r\n                    d.resolve = 'Unresolved';\r\n                d.resolve = d.resolve.trim();\r\n                if(d.resolve==='Resolved: they get it!' || \r\n                    d.resolve==='Resolved - they get it!')\r\n                    return '#33A532';\r\n                else if(d.resolve===\"Resolved - they're still shaky\" || \r\n                    d.resolve===\"Resolved: they're still shaky\")\r\n                    return '#FAD201';\r\n                else if(d.resolve.includes('Unresolved'))\r\n                    return '#CF142B';\r\n                else   \r\n                    return '#FAD201';\r\n            })\r\n            .on(\"click\",(d)=>this.createInfo(d))\r\n            .append('title')\r\n            .attr('text',d=>d.tutor);\r\n\r\n        d3Selection.select(`#${this.rowName}`)\r\n            .classed(\"ucRow\",true)\r\n            .append(\"text\")\r\n            .attr(\"x\",5)\r\n            .attr(\"y\",75)\r\n            .classed(\"ucName\",true)\r\n            .text(this.props.lastName)\r\n            .append(\"title\")\r\n            .text(this.rowName + \" \" + this.props.lastName);        \r\n    }\r\n\r\n    createInfo(d){\r\n        const info = d3Selection.select(\"#info\");\r\n        info.classed('hideInfo',false);\r\n        info.selectAll(\"*\").remove();\r\n\r\n        for(let attr in d){\r\n            if(attr === 'date')\r\n                info.append('p').text(\"Date: \" + moment(d[attr])\r\n                .format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\r\n            else if(attr === 'resolve')\r\n                info.append('p').text(d[attr]);\r\n            else{\r\n                const attrTitle = attr[0].toUpperCase() + attr.substring(1);\r\n                info.append(\"p\").text(attrTitle+\":\"+d[attr]);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const iconStyle = <style jsx>{this.props.styling}</style>;\r\n        const style = <style jsx>{`          \r\n        .ucRow text{\r\n            cursor:pointer;\r\n        }\r\n        \r\n        .ucRow rect{\r\n            stroke:#8E8D8A;\r\n        }`    \r\n      }</style>\r\n        return <>\r\n            {iconStyle}\r\n            {/* <styles jsx>{fontStyles}</styles> */}\r\n            <svg id={this.rowName} className=\"row\" width={this.props.width+150} height={140}>\r\n                <rect className=\"border\" width={this.props.width+150} height={140}/>\r\n            </svg>\r\n            </>\r\n    }\r\n}\r\n\r\nexport default UseCaseRow;","import Link from 'next/Link';\r\nimport '../styles.css';\r\nimport fallData from '../public/Data/Fall2018.json';\r\nimport springData from '../public/Data/Spring2019.json';\r\nimport Bar from '../components/stickyBar.js';\r\nimport Layout from '../components/Layout.js';\r\nimport Timeframe from '../components/Timeframe.js';\r\nimport UseCaseRow from '../components/Usecase.js';\r\nimport Helmet from 'react-helmet';\r\nimport moment from 'moment';\r\nimport * as d3Selection from \"d3-selection\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faDragon, faLemon, faCat, faDog, faHippo, faCrow, faCheese, \r\n    faHorse, faFrog, faSpider, faBreadSlice, faFish, faAppleAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Timeline extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const scale = d3Scale.scaleTime()\r\n        .domain([moment(\"2018-09-01\"),moment(\"2019-05-20\")])\r\n        .range([0,1150]);\r\n  \r\n      this.updateZoom = this.updateZoom.bind(this);\r\n      this.updateStart=this.updateStart.bind(this);\r\n      this.updateEnd = this.updateEnd.bind(this);\r\n      this.updateFrame = this.updateFrame.bind(this);\r\n      this.resetZoom = this.resetZoom.bind(this);\r\n      this.resetFilter = this.resetFilter.bind(this);\r\n      this.filterStudent = this.filterStudent.bind(this);\r\n      this.filterTutor = this.filterTutor.bind(this);\r\n      this.enterStudent = this.enterStudent.bind(this);\r\n      this.enterTutor = this.enterTutor.bind(this);\r\n      this.parseData = this.parseData.bind(this);\r\n      this.mergeData = this.mergeData.bind(this);\r\n\r\n\r\n        const fData = this.parseData(fallData);\r\n        const sData = this.parseData(springData);\r\n\r\n        const allData = this.mergeData(fData,sData);\r\n\r\n        this.state={\r\n            start:moment(\"2018-09-01\"),\r\n            end: moment(\"2019-05-20\"),   \r\n            scale:scale,\r\n            filteredData:allData,\r\n            initData:allData,\r\n            queryStudent:\"\",\r\n            queryTutor:\"\"\r\n          }\r\n\r\n        const style = <style jsx>{`\r\n          .App {\r\n            text-align: center;\r\n          }\r\n          \r\n          .datePicker{\r\n            display:inline-block;\r\n            position:relative;\r\n            left:15px;\r\n          }\r\n          \r\n          #filter{\r\n            margin-bottom:3px;\r\n          }\r\n          \r\n          .hideInfo{\r\n            visibility: hidden;\r\n          }\r\n          \r\n          #legend{\r\n            position: relative;\r\n            bottom:70px;\r\n            float: right;\r\n            border:2px solid black;\r\n            padding:2px;\r\n          }\r\n                    \r\n          #info{\r\n            text-align:left;\r\n            display:inline-block;\r\n            padding:5px;\r\n            margin:3px;\r\n            border:2px solid black;\r\n            max-width:300px;\r\n            overflow-x:auto;\r\n          }\r\n          \r\n          #info p{\r\n            font-size:.8em;\r\n            margin-block-start:.5em;\r\n            margin-block-end:.5em;\r\n          \r\n          }\r\n          \r\n          input{\r\n            background-color:#D8C3A5;\r\n          }\r\n          \r\n          #ucContainer{\r\n            overflow-y:auto;\r\n            height:350px;\r\n          }\r\n          \r\n          .ucRow foreignObject{\r\n            width:150px;\r\n            overflow-x:auto;\r\n            height:50px;\r\n          }\r\n          \r\n          #zoomBox .selection{\r\n            stroke:#EAE7DC;\r\n          }\r\n        `}</style>\r\n    }\r\n\r\n    resetZoom(scale,f){\r\n        if(d3Selection.event.selection === null){\r\n          this.setState({\r\n              start:moment(\"2018-09-01\"),\r\n              end: moment('2019-05-20')\r\n          },f);\r\n        }\r\n    }\r\n    \r\n    parseData(semesterData){\r\n        const profData = [];\r\n        for(let student of semesterData){\r\n          if(profData[student.professor] === undefined)\r\n            profData[student.professor] = [];\r\n    \r\n          profData[student.professor].push(student); \r\n        }\r\n    \r\n        return profData;\r\n    }\r\n    \r\n      mergeData(fData,sData){\r\n        const allData = {};\r\n    \r\n        for(let f in fData)\r\n          allData[f] = fData[f];\r\n        \r\n        for(let s in sData){\r\n          if(s in allData)\r\n            allData[s] = allData[s].concat(sData[s]);\r\n          else\r\n            allData[s] = sData[s];\r\n        }\r\n    \r\n        return allData;\r\n    }\r\n\r\n    updateZoom(scale,f){\r\n        let s = null, e = null;\r\n    \r\n        if(d3Selection.event.selection === null){\r\n          this.resetZoom(scale,f);\r\n          return;\r\n        }\r\n    \r\n        [s,e] = d3Selection.event.selection.map(ele=>scale.invert(ele));\r\n        s = moment(s);\r\n        e = moment(e);\r\n        \r\n    \r\n        this.setState({\r\n          start:s,\r\n          end:e\r\n        });\r\n    }\r\n\r\n    updateStart(date,f){\r\n        this.setState({\r\n          start:moment(date)\r\n        },f);\r\n    }\r\n      \r\n    updateEnd(date,f){\r\n        this.setState({\r\n          end:moment(date)\r\n        },f);\r\n    }\r\n    \r\n    updateFrame(frame,f){\r\n    let start = this.state.start;\r\n    let end = this.state.end;\r\n\r\n    switch(frame){\r\n        case \"1 day\":\r\n        end = moment(start).add(1,\"day\").isBefore(moment()) ? moment(start).add(1,\"day\") : end;\r\n        this.setState({\r\n            end: end\r\n        }, f);\r\n        break;\r\n\r\n        case \"1 week\":     \r\n        end = moment(start).add(1,\"week\").isBefore(moment()) ? moment(start).add(1,\"week\") : end;\r\n        this.setState({\r\n            end:end\r\n        },f);\r\n        break;\r\n\r\n        case \"1 month\":\r\n        end = moment(start).add(1,\"month\").isBefore(moment()) ? moment(start).add(1,\"month\") : end;\r\n        this.setState({\r\n            end:end\r\n        },f);\r\n        break;\r\n\r\n        case \"Fall Semester\":\r\n        start = moment('2018-09-01');\r\n        end = moment('2018-12-15');\r\n        this.setState({\r\n            start:start,\r\n            end:end\r\n        },f);\r\n        break;\r\n\r\n        case \"Spring Semester\":\r\n        start = moment('2019-01-25');\r\n        end = moment('2019-05-20');\r\n        this.setState({\r\n            start:start,\r\n            end:end\r\n        },f);\r\n        break;\r\n\r\n        case \"All\":\r\n        default:\r\n        this.setState({\r\n            start:moment(\"2018-09-01\"),\r\n            end: moment(\"2019-05-20\")\r\n        },f);\r\n        break;\r\n\r\n    }\r\n    }\r\n\r\n    filterStudent(){}\r\n    filterTutor(){}\r\n    resetFilter(evt){\r\n        evt.preventDefault();\r\n        d3Selection.select(\"#info\").classed('hideInfo',true);\r\n        this.setState({\r\n          filteredData:this.state.initData,\r\n          queryStudent:\"\",\r\n          queryTutor:\"\"});\r\n    }\r\n    enterStudent(evt){\r\n        this.setState({queryTutor:evt.target.value});\r\n    }\r\n    enterTutor(evt){\r\n        this.setState({queryTutor:evt.target.value});\r\n    }\r\n\r\n    render(){\r\n        \r\n        const profData = [];\r\n\r\n        let numProfs = 0;\r\n\r\n        const fontStyles = `\r\n         @font-face {\r\n            font-family: 'Font Awesome 5 Free';\r\n            font-style: normal;\r\n            font-weight: 400;\r\n            font-display: auto;\r\n            src: url(\"/FontAwesome/fa-regular-400.ttf\");\r\n            \r\n        }\r\n        .fa,\r\n        .fas {\r\n            -moz-osx-font-smoothing: grayscale;\r\n            -webkit-font-smoothing: antialiased;\r\n            display: inline-block;\r\n            font-style: normal;\r\n            font-variant: normal;\r\n            text-rendering: auto;\r\n            line-height: 1;\r\n            font-family: 'Font Awesome 5 Free';\r\n            font-weight: 900; }`\r\n\r\n        for(let ele in this.state.filteredData){\r\n          const prof = this.state.filteredData[ele];\r\n          const profInfo = ele.split(\" \");\r\n          const uc = <UseCaseRow num={numProfs++} data ={prof} name={profInfo[0]} lastName ={profInfo[1]} key={ele}\r\n          start = {this.state.start} end = {this.state.end} width = {900} styling = {fontStyles}/>\r\n          profData.push(uc);\r\n        }\r\n    \r\n        const ucContainer = <div id=\"ucContainer\">\r\n          {profData}\r\n        </div>\r\n\r\n        const timeLine = <Timeframe width={900}start={this.state.start} end = {this.state.end} \r\n        updateZoom = {this.updateZoom}updateEnd = {this.updateEnd} updateStart={this.updateStart} \r\n        setFrame={this.updateFrame} data={this.state.filteredData} key='Timeline'/>;\r\n\r\n        const filter = <div id='filter'> <form onSubmit={this.filterStudent}>\r\n            Enter the Student Name: <input type=\"text\" value={this.state.queryStudent} onChange={this.enterStudent}/>\r\n            <input type='submit'/> </form>\r\n            <form onSubmit={this.filterTutor} onReset = {this.resetFilter}>\r\n                Enter the Tutor Name:  <input type=\"text\" value={this.state.queryTutor} onChange={this.enterTutor}/>\r\n                <input type='submit'/> <br/>\r\n                <input type='reset'/>\r\n            </form>\r\n        </div>\r\n\r\n        const legend = <div id='legend'>\r\n        <h3>LEGEND</h3>\r\n        <p>Jeff: <FontAwesomeIcon icon={faDragon}/>  Julia: <FontAwesomeIcon icon={faCat}/> Bella: <FontAwesomeIcon icon={faLemon}/></p>\r\n        <p>Alex: <FontAwesomeIcon icon={faDog}/> Alan: <FontAwesomeIcon icon={faCrow}/> Hari: <FontAwesomeIcon icon={faCheese}/></p>\r\n        <p>Ilias: <FontAwesomeIcon icon={faHippo}/>  Aashish: <FontAwesomeIcon icon={faHorse}/>Gilad: <FontAwesomeIcon icon={faFrog}/></p>\r\n        <p>Cindy: <FontAwesomeIcon icon={faSpider}/> Santiago: <FontAwesomeIcon icon={faBreadSlice}/>  Rahul: <FontAwesomeIcon icon={faFish}/></p>\r\n        <p>Jonathan: <FontAwesomeIcon icon={faAppleAlt}/> </p>\r\n        <br/>\r\n        <p><span style={{color:'#CF142B'}}>Red</span>: Unresolved</p>\r\n        <p><span style={{color:\"#FAD201\"}}>Yellow</span>: Partially Resolved</p>\r\n        <p><span style={{color:\"#33A532\"}}>Green</span>: Resolved</p>\r\n      </div>\r\n\r\n        return<>\r\n            <Bar/>\r\n            <Layout>    \r\n                <Helmet>\r\n                    <title>Tutor Timeline</title>\r\n                </Helmet>\r\n                <h1>2018-2019 CS101 Tutoring Timeline</h1>\r\n                {filter}\r\n                {ucContainer}\r\n                {timeLine}\r\n                {legend} \r\n            </Layout>\r\n        </>;\r\n    }\r\n\r\n}\r\n\r\nexport default Timeline;\r\n\r\n/*\r\nimport React from 'react';\r\nimport './App.css';\r\nimport fallData from \"./Data/Fall2018.json\";\r\nimport springData from \"./Data/Spring2018.json\";\r\nimport Timeline from \"./Timeline\";\r\nimport UseCaseRow from \"./UseCase\";\r\nimport moment from \"moment\";\r\nimport * as d3Selection from \"d3-selection\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    const scale = d3Scale.scaleTime()\r\n      .domain([moment(\"2018-09-01\"),moment(\"2019-05-20\")])\r\n      .range([0,1150]);\r\n\r\n    this.updateZoom = this.updateZoom.bind(this);\r\n    this.updateStart=this.updateStart.bind(this);\r\n    this.updateEnd = this.updateEnd.bind(this);\r\n    this.updateFrame = this.updateFrame.bind(this);\r\n    this.resetZoom = this.resetZoom.bind(this);\r\n    this.resetFilter = this.resetFilter.bind(this);\r\n    this.filterStudent = this.filterStudent.bind(this);\r\n    this.filterTutor = this.filterTutor.bind(this);\r\n    this.enterStudent = this.enterStudent.bind(this);\r\n    this.enterTutor = this.enterTutor.bind(this);\r\n    this.parseData = this.parseData.bind(this);\r\n    this.mergeData = this.mergeData.bind(this);\r\n \r\n    const fData = this.parseData(fallData);\r\n    const sData = this.parseData(springData);\r\n\r\n    const allData = this.mergeData(fData,sData);\r\n\r\n    this.state={\r\n      start:moment(\"2018-09-01\"),\r\n      end: moment(\"2019-05-20\"),   \r\n      scale:scale,\r\n      filteredData:allData,\r\n      initData:allData,\r\n      queryStudent:\"\",\r\n      queryTutor:\"\"\r\n    }\r\n  }\r\n\r\n\r\n  parseData(semesterData){\r\n    const profData = [];\r\n    for(let student of semesterData){\r\n      if(profData[student.professor] === undefined)\r\n        profData[student.professor] = [];\r\n\r\n      profData[student.professor].push(student); \r\n    }\r\n\r\n    return profData;\r\n  }\r\n\r\n  mergeData(fData,sData){\r\n    const allData = {};\r\n\r\n    for(let f in fData)\r\n      allData[f] = fData[f];\r\n    \r\n    for(let s in sData){\r\n      if(s in allData)\r\n        allData[s] = allData[s].concat(sData[s]);\r\n      else\r\n        allData[s] = sData[s];\r\n    }\r\n\r\n    return allData;\r\n  }\r\n\r\n  updateStart(date,f){\r\n    this.setState({\r\n      start:moment(date)\r\n    },f);\r\n  }\r\n  \r\n  updateEnd(date,f){\r\n    this.setState({\r\n      end:moment(date)\r\n    },f);\r\n  }\r\n\r\n  updateFrame(frame,f){\r\n    let start = this.state.start;\r\n    let end = this.state.end;\r\n\r\n    switch(frame){\r\n      case \"1 day\":\r\n        end = moment(start).add(1,\"day\").isBefore(moment()) ? moment(start).add(1,\"day\") : end;\r\n        this.setState({\r\n          end: end\r\n        }, f);\r\n        break;\r\n\r\n      case \"1 week\":     \r\n        end = moment(start).add(1,\"week\").isBefore(moment()) ? moment(start).add(1,\"week\") : end;\r\n        this.setState({\r\n          end:end\r\n        },f);\r\n        break;\r\n\r\n      case \"1 month\":\r\n        end = moment(start).add(1,\"month\").isBefore(moment()) ? moment(start).add(1,\"month\") : end;\r\n        this.setState({\r\n          end:end\r\n        },f);\r\n        break;\r\n\r\n      case \"Fall Semester\":\r\n        start = moment('2018-09-01');\r\n        end = moment('2018-12-15');\r\n        this.setState({\r\n          start:start,\r\n          end:end\r\n        },f);\r\n        break;\r\n\r\n      case \"Spring Semester\":\r\n        start = moment('2019-01-25');\r\n        end = moment('2019-05-20');\r\n        this.setState({\r\n          start:start,\r\n          end:end\r\n        },f);\r\n        break;\r\n\r\n      case \"All\":\r\n      default:\r\n        this.setState({\r\n          start:moment(\"2018-09-01\"),\r\n          end: moment(\"2019-05-20\")\r\n        },f);\r\n        break;\r\n\r\n    }\r\n  }\r\n\r\n  updateZoom(scale,f){\r\n    let s = null, e = null;\r\n\r\n    if(d3Selection.event.selection === null){\r\n      this.resetZoom(scale,f);\r\n      return;\r\n    }\r\n\r\n    [s,e] = d3Selection.event.selection.map(ele=>scale.invert(ele));\r\n    s = moment(s);\r\n    e = moment(e);\r\n    \r\n\r\n    this.setState({\r\n      start:s,\r\n      end:e\r\n    });\r\n  }\r\n\r\n  resetZoom(scale,f){\r\n    if(d3Selection.event.selection === null){\r\n      this.setState({\r\n          start:moment(\"2018-09-01\"),\r\n          end: moment('2019-05-20')\r\n      },f);\r\n    }\r\n  }\r\n\r\n\r\n  enterStudent(event){\r\n    this.setState({queryStudent:event.target.value});\r\n  }\r\n\r\n  enterTutor(event){\r\n    this.setState({queryTutor:event.target.value});\r\n  }\r\n\r\n  filterStudent(event){\r\n    event.preventDefault();\r\n\r\n    const query = this.state.queryStudent;\r\n    if(query===\"\" || query===null || query===undefined)\r\n      return this.state.initData;\r\n      \r\n    const filteredData = {};\r\n    for(let prof in this.state.filteredData){\r\n      filteredData[prof] = [];\r\n    }\r\n    \r\n\r\n    for(let prof in this.state.initData){\r\n      for(let student of this.state.initData[prof]){\r\n        if(student.name.toLowerCase().includes(query.toLowerCase()))\r\n          filteredData[prof].push(student);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      filteredData:filteredData,\r\n      queryTutor:\"\"\r\n    });\r\n  }\r\n\r\n  resetFilter(event){\r\n    event.preventDefault();\r\n    d3Selection.select(\"#info\").classed('hideInfo',true);\r\n    //d3Selection.select(\"#info\").selectAll(\"*\").remove();\r\n    this.setState({\r\n      filteredData:this.state.initData,\r\n      queryStudent:\"\",\r\n      queryTutor:\"\"});\r\n  }\r\n\r\n  filterTutor(event){\r\n    event.preventDefault();\r\n\r\n    const query = this.state.queryTutor;\r\n    if(query===\"\" || query===null || query===undefined)\r\n      return this.state.initData;\r\n      \r\n    const filteredData = {};\r\n    for(let prof in this.state.filteredData){\r\n      filteredData[prof] = [];\r\n    }\r\n    \r\n    for(let prof in this.state.initData){\r\n      for(let student of this.state.initData[prof]){\r\n        if(student.tutor.toLowerCase().includes(query.toLowerCase()))\r\n          filteredData[prof].push(student);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      filteredData:filteredData,\r\n      queryStudent:\"\"\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const profData = [];\r\n\r\n    let numProfs = 0;\r\n    for(let ele in this.state.filteredData){\r\n      const prof = this.state.filteredData[ele];\r\n      const uc = <UseCaseRow num={numProfs++} data ={prof} name={ele.split(\" \")[0]} lastName ={ele.split(\" \")[1]} key={ele}\r\n      start = {this.state.start} end = {this.state.end} width = {900}/>\r\n      profData.push(uc);\r\n    }\r\n\r\n    const ucContainer = <div id=\"ucContainer\">\r\n      {profData}\r\n    </div>\r\n\r\n    const timeLine = <Timeline width={900}start={this.state.start} end = {this.state.end} \r\n    updateZoom = {this.updateZoom}updateEnd = {this.updateEnd} updateStart={this.updateStart} \r\n    setFrame={this.updateFrame} data={this.state.filteredData} key='Timeline'/>;\r\n\r\n    let info = <div id=\"info\" className='hideInfo'></div>    \r\n \r\n    const legend = <div id='legend'>\r\n        <h3>LEGEND</h3>\r\n        <p>Jeff: <i className='fas fa-dragon'></i>  Julia: <i className='fas fa-cat'></i> Bella: <i className='fas fa-lemon'></i></p>\r\n        <p>Alex: <i className='fas fa-dog'></i> Alan: <i className='fas fa-crow'></i>  Hari: <i className='fas fa-cheese'></i></p>\r\n        <p>Ilias: <i className='fas fa-hippo'></i>  Aashish: <i className='fas fa-horse'></i> Gilad: <i className='fas fa-frog'></i></p>\r\n        <p>Cindy: <i className='fas fa-spider'></i>Santiago: <i className='fas fa-bread-slice'></i>  Rahul: <i className='fas fa-fish'></i></p>\r\n        <p>Jonathan: <i className='fas fa-apple-alt'></i></p>\r\n        <br/>\r\n        <p><span style={{color:'#CF142B'}}>Red</span>: Unresolved</p>\r\n        <p><span style={{color:\"#FAD201\"}}>Yellow</span>: Partially Resolved</p>\r\n        <p><span style={{color:\"#33A532\"}}>Green</span>: Resolved</p>\r\n      </div>\r\n\r\n    const filter = <div id='filter'> <form onSubmit={this.filterStudent}>\r\n          Enter the Student Name: <input type=\"text\" value={this.state.queryStudent} onChange={this.enterStudent}/>\r\n          <input type='submit'/> </form>\r\n        <form onSubmit={this.filterTutor} onReset = {this.resetFilter}>\r\n          Enter the Tutor Name:  <input type=\"text\" value={this.state.queryTutor} onChange={this.enterTutor}/>\r\n          <input type='submit'/> <br/>\r\n          <input type='reset'/>\r\n        </form>\r\n      </div>\r\n\r\n    return <div>\r\n      <Helmet>\r\n        <title>Tutor Timeline</title>\r\n      </Helmet>\r\n      <h1>2018-2019 CS101 Tutoring Timeline</h1>\r\n      {filter}\r\n      {ucContainer}\r\n      {timeLine}\r\n      {legend}\r\n      {info}\r\n    </div>\r\n  }\r\n  \r\n}\r\nexport default App;\r\n*/"],"mappings":"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","sourceRoot":""}