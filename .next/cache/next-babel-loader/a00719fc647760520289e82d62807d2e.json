{"ast":null,"code":"import GLTFLoader from 'three-gltf-loader';\nimport * as RawOrbitControls from 'three-orbit-controls';\nimport * as THREE from 'three';\n\nclass Model {\n  constructor(fileName, isThemed) {\n    if (isThemed) this.filePath = `Logo_${fileName}.gltf`;else this.filePath = fileName;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerHeight / window.innerHeight, .1, 1000);\n    this.camera.position.z = 5;\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(100, 100);\n    this.renderer.setClearColor(0xff0000, 0);\n    this.renderer.gammaOutput = true;\n    this.renderer.gammaFactor = 2.2;\n    this.topLight = new THREE.PointLight(0xffffff, 4);\n    this.topLight.position.set(0, 0, 7);\n    this.bottomLight = new THREE.PointLight(0xffffff, 4);\n    this.bottomLight.position.set(0, 0, -7);\n    this.loader = new GLTFLoader();\n  }\n\n  load() {\n    const OrbitControls = RawOrbitControls(THREE);\n    const controller = new OrbitControls(this.camera, this.renderer.domElement);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controller.update();\n      this.renderer.render(this.scene, this.camera);\n    };\n\n    console.log(this);\n    this.loader.load(this.filePath, gltf => {\n      this.logo = gltf.scene;\n      this.logo.rotation.y = -Math.PI / 2;\n      this.logo.scale.set(2, 2, 2);\n      this.scene.add(this.logo);\n      this.scene.add(this.topLight);\n      this.scene.add(this.bottomLight);\n      animate();\n    }, xhr => {\n      return undefined; //TODO: add loading animation\n    }, error => {\n      console.error(error);\n    });\n  }\n\n}\n\nexport default Model;","map":null,"metadata":{},"sourceType":"module"}