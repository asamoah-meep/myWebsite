{"ast":null,"code":"import GLTFLoader from 'three-gltf-loader';\nimport * as RawOrbitControls from 'three-orbit-controls';\nimport * as THREE from 'three';\n\nclass Model {\n  constructor(fileName) {\n    this.filePath = `../public/models/${fileName}.gltf`;\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerHeight / window.innerHeight, .1, 1000);\n    this.camera.position.z = 5;\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(100, 100);\n    this.renderer.setClearColor(0xff0000, 0);\n    this.renderer.gammaOutput = true;\n    this.renderer.gammaFactor = 2.2;\n    this.topLight = new THREE.PointLight(0xffffff, 4);\n    this.topLight.position.set(0, 0, 7);\n    this.bottomLight = new THREE.PointLight(0xffffff, 4);\n    this.bottomLight.position.set(0, 0, -7);\n    this.loader = new GLTFLoader();\n  }\n\n  load() {\n    const OrbitControls = RawOrbitControls(THREE);\n    const controller = new OrbitControls(this.camera, this.renderer.domElement);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controller.update();\n      this.renderer.render(this.scene, this.camera);\n    };\n\n    this.loader.load(this.filePath, gltf => {\n      this.logo = gltf.scene;\n      this.logo.rotation.y = -Math.PI / 2;\n      this.logo.scale.set(2, 2, 2);\n      this.scene.add(this.logo);\n      this.scene.add(this.topLight);\n      this.scene.add(this.bottomLight);\n      animate();\n    }, xhr => {\n      return undefined; //TODO: add loading animation\n    }, error => {\n      console.error(error);\n    });\n  }\n\n}\n\nexport default Model;","map":{"version":3,"sources":["C:/Users/User/Documents/myWebsite/src/model.js"],"names":["GLTFLoader","RawOrbitControls","THREE","Model","constructor","fileName","filePath","scene","Scene","camera","PerspectiveCamera","window","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","setClearColor","gammaOutput","gammaFactor","topLight","PointLight","set","bottomLight","loader","load","OrbitControls","controller","domElement","animate","requestAnimationFrame","update","render","gltf","logo","rotation","y","Math","PI","scale","add","xhr","undefined","error","console"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,sBAAlC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,MAAMC,KAAN,CAAW;AAEPC,EAAAA,WAAW,CAACC,QAAD,EAAU;AACjB,SAAKC,QAAL,GAAiB,oBAAmBD,QAAS,OAA7C;AAEA,SAAKE,KAAL,GAAa,IAAIL,KAAK,CAACM,KAAV,EAAb;AAEA,SAAKC,MAAL,GAAc,IAAIP,KAAK,CAACQ,iBAAV,CAA4B,EAA5B,EAA+BC,MAAM,CAACC,WAAP,GAAmBD,MAAM,CAACC,WAAzD,EAAqE,EAArE,EAAwE,IAAxE,CAAd;AACA,SAAKH,MAAL,CAAYI,QAAZ,CAAqBC,CAArB,GAAyB,CAAzB;AAEA,SAAKC,QAAL,GAAgB,IAAIb,KAAK,CAACc,aAAV,CAAwB;AAACC,MAAAA,SAAS,EAAC,IAAX;AAAgBC,MAAAA,KAAK,EAAC;AAAtB,KAAxB,CAAhB;AACA,SAAKH,QAAL,CAAcI,OAAd,CAAsB,GAAtB,EAA0B,GAA1B;AACA,SAAKJ,QAAL,CAAcK,aAAd,CAA4B,QAA5B,EAAqC,CAArC;AACA,SAAKL,QAAL,CAAcM,WAAd,GAA0B,IAA1B;AACA,SAAKN,QAAL,CAAcO,WAAd,GAA0B,GAA1B;AAEA,SAAKC,QAAL,GAAgB,IAAIrB,KAAK,CAACsB,UAAV,CAAqB,QAArB,EAA8B,CAA9B,CAAhB;AACA,SAAKD,QAAL,CAAcV,QAAd,CAAuBY,GAAvB,CAA2B,CAA3B,EAA6B,CAA7B,EAA+B,CAA/B;AAEA,SAAKC,WAAL,GAAmB,IAAIxB,KAAK,CAACsB,UAAV,CAAqB,QAArB,EAA8B,CAA9B,CAAnB;AACA,SAAKE,WAAL,CAAiBb,QAAjB,CAA0BY,GAA1B,CAA8B,CAA9B,EAAgC,CAAhC,EAAkC,CAAC,CAAnC;AAEA,SAAKE,MAAL,GAAc,IAAI3B,UAAJ,EAAd;AACH;;AAED4B,EAAAA,IAAI,GAAE;AAEF,UAAMC,aAAa,GAAG5B,gBAAgB,CAACC,KAAD,CAAtC;AACA,UAAM4B,UAAU,GAAG,IAAID,aAAJ,CAAkB,KAAKpB,MAAvB,EAA+B,KAAKM,QAAL,CAAcgB,UAA7C,CAAnB;;AAEA,UAAMC,OAAO,GAAG,MAAI;AAChBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAF,MAAAA,UAAU,CAACI,MAAX;AACA,WAAKnB,QAAL,CAAcoB,MAAd,CAAsB,KAAK5B,KAA3B,EAAkC,KAAKE,MAAvC;AACH,KAJD;;AAMA,SAAKkB,MAAL,CAAYC,IAAZ,CAAiB,KAAKtB,QAAtB,EAAiC8B,IAAD,IAAS;AACrC,WAAKC,IAAL,GAAYD,IAAI,CAAC7B,KAAjB;AACA,WAAK8B,IAAL,CAAUC,QAAV,CAAmBC,CAAnB,GAAqB,CAACC,IAAI,CAACC,EAAN,GAAS,CAA9B;AACA,WAAKJ,IAAL,CAAUK,KAAV,CAAgBjB,GAAhB,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,CAAxB;AACA,WAAKlB,KAAL,CAAWoC,GAAX,CAAe,KAAKN,IAApB;AACA,WAAK9B,KAAL,CAAWoC,GAAX,CAAe,KAAKpB,QAApB;AACA,WAAKhB,KAAL,CAAWoC,GAAX,CAAe,KAAKjB,WAApB;AACAM,MAAAA,OAAO;AAEV,KATD,EASGY,GAAD,IAAO;AACL,aAAOC,SAAP,CADK,CACa;AACrB,KAXD,EAWIC,KAAD,IAAU;AACTC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KAbD;AAcH;;AAlDM;;AAqDX,eAAe3C,KAAf","sourcesContent":["import GLTFLoader from 'three-gltf-loader';\r\nimport * as RawOrbitControls from 'three-orbit-controls';\r\nimport * as THREE from 'three';\r\n\r\nclass Model{\r\n    \r\n    constructor(fileName){\r\n        this.filePath = `../public/models/${fileName}.gltf`;\r\n\r\n        this.scene = new THREE.Scene();\r\n\r\n        this.camera = new THREE.PerspectiveCamera(75,window.innerHeight/window.innerHeight,.1,1000);\r\n        this.camera.position.z = 5;\r\n\r\n        this.renderer = new THREE.WebGLRenderer({antialias:true,alpha:true});\r\n        this.renderer.setSize(100,100);\r\n        this.renderer.setClearColor(0xff0000,0);\r\n        this.renderer.gammaOutput=true;\r\n        this.renderer.gammaFactor=2.2;\r\n\r\n        this.topLight = new THREE.PointLight(0xffffff,4);\r\n        this.topLight.position.set(0,0,7);\r\n\r\n        this.bottomLight = new THREE.PointLight(0xffffff,4);\r\n        this.bottomLight.position.set(0,0,-7);\r\n\r\n        this.loader = new GLTFLoader();\r\n    }\r\n\r\n    load(){\r\n\r\n        const OrbitControls = RawOrbitControls(THREE);\r\n        const controller = new OrbitControls(this.camera, this.renderer.domElement);\r\n\r\n        const animate = ()=>{\r\n            requestAnimationFrame( animate );\r\n            controller.update();\r\n            this.renderer.render( this.scene, this.camera );\r\n        };\r\n\r\n        this.loader.load(this.filePath, (gltf) =>{\r\n            this.logo = gltf.scene;\r\n            this.logo.rotation.y=-Math.PI/2;\r\n            this.logo.scale.set(2,2,2);\r\n            this.scene.add(this.logo);\r\n            this.scene.add(this.topLight);\r\n            this.scene.add(this.bottomLight);\r\n            animate();\r\n\r\n        },(xhr)=>{\r\n            return undefined; //TODO: add loading animation\r\n        }, (error) =>{\r\n            console.error(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Model;"]},"metadata":{},"sourceType":"module"}