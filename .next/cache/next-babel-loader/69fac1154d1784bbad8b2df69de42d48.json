{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport 'styles.css';\nimport fallData from 'public/Data/Fall2018.json';\nimport springData from 'public/Data/Spring2019.json';\nimport Bar from 'components/stickyBar.js';\nimport Timeframe from 'components/Timeframe.js';\nimport UseCaseRow from 'components/Usecase.js';\nimport Helmet from 'react-helmet';\nimport moment from 'moment';\nimport * as d3Selection from \"d3-selection\";\nimport * as d3Scale from \"d3-scale\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDragon, faLemon, faCat, faDog, faHippo, faCrow, faCheese, faHorse, faFrog, faSpider, faBreadSlice, faFish, faAppleAlt } from '@fortawesome/free-solid-svg-icons';\n\nvar Timeline = /*#__PURE__*/function (_React$Component) {\n  _inherits(Timeline, _React$Component);\n\n  var _super = _createSuper(Timeline);\n\n  function Timeline(props) {\n    var _this;\n\n    _classCallCheck(this, Timeline);\n\n    _this = _super.call(this, props);\n    var scale = d3Scale.scaleTime().domain([moment(\"2018-09-02\"), moment(\"2019-05-21\")]).range([0, 1150]);\n    _this.updateZoom = _this.updateZoom.bind(_assertThisInitialized(_this));\n    _this.updateStart = _this.updateStart.bind(_assertThisInitialized(_this));\n    _this.updateEnd = _this.updateEnd.bind(_assertThisInitialized(_this));\n    _this.updateFrame = _this.updateFrame.bind(_assertThisInitialized(_this));\n    _this.resetZoom = _this.resetZoom.bind(_assertThisInitialized(_this));\n    _this.resetFilter = _this.resetFilter.bind(_assertThisInitialized(_this));\n    _this.filterStudent = _this.filterStudent.bind(_assertThisInitialized(_this));\n    _this.filterTutor = _this.filterTutor.bind(_assertThisInitialized(_this));\n    _this.enterStudent = _this.enterStudent.bind(_assertThisInitialized(_this));\n    _this.enterTutor = _this.enterTutor.bind(_assertThisInitialized(_this));\n    _this.parseData = _this.parseData.bind(_assertThisInitialized(_this));\n    _this.mergeData = _this.mergeData.bind(_assertThisInitialized(_this));\n\n    var fData = _this.parseData(fallData);\n\n    var sData = _this.parseData(springData);\n\n    var allData = _this.mergeData(fData, sData);\n\n    _this.state = {\n      start: moment(\"2018-09-02\"),\n      end: moment(\"2019-05-21\"),\n      scale: scale,\n      filteredData: allData,\n      initData: allData,\n      queryStudent: \"\",\n      queryTutor: \"\"\n    };\n    _this.style = __jsx(\"style\", null, \"\\n\\n          .datePicker{\\n            display:inline-block;\\n            position:relative;\\n            left:15px;\\n          }\\n          \\n          #filter{\\n            padding-right:10px;\\n            padding-bottom:10px;\\n            display:inline-block;\\n            width:467.5px;\\n            vertical-align:bottom;\\n            border-right: 2px solid #FFCB9A;\\n            border-bottom: 2px solid #FFCB9A;\\n            margin-bottom:20px;\\n\\n          }\\n          \\n          .hideInfo{\\n            visibility: hidden;\\n          }\\n          \\n          #legend{\\n            vertical-align:top;\\n            display: inline-block;\\n            border:2px solid #FFCB9A;\\n            padding:10px;\\n            margin-left:20px;\\n            position:relative;\\n            width:500px;\\n            padding:2px;\\n            margin-bottom:20px;\\n          }\\n                    \\n          #info{\\n            text-align:left;\\n            display:inline-block;\\n            padding:5px;\\n            margin:3px;\\n            border:2px solid #FFCB9A;\\n            overflow-x:auto;\\n            position:relative;\\n            bottom:60px;\\n            left:710px;\\n            width:300px;\\n          }\\n          \\n          #info p{\\n            font-size:.8em;\\n            margin-block-start:.5em;\\n            margin-block-end:.5em;\\n          \\n          }\\n          \\n          input{\\n            background-color:#D8C3A5;\\n          }\\n\\n          #studentForm{\\n              position:relative;\\n              left:8px;\\n          }\\n\\n          #tutorForm{\\n              position:relative;\\n              left:27px;\\n          }\\n\\n          #ucContainer{\\n            overflow-y:auto;\\n            height:350px;\\n            width:1030px;\\n            display:inline-block;\\n          }\\n          \\n        \");\n    return _this;\n  }\n\n  _createClass(Timeline, [{\n    key: \"resetZoom\",\n    value: function resetZoom(f) {\n      if (d3Selection.event.selection === null) {\n        this.setState({\n          start: moment(\"2018-09-02\"),\n          end: moment('2019-05-21')\n        }, f);\n      }\n    }\n  }, {\n    key: \"parseData\",\n    value: function parseData(semesterData) {\n      var profData = [];\n\n      var _iterator = _createForOfIteratorHelper(semesterData),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var student = _step.value;\n          if (profData[student.professor] === undefined) profData[student.professor] = [];\n          profData[student.professor].push(student);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return profData;\n    }\n  }, {\n    key: \"mergeData\",\n    value: function mergeData(fData, sData) {\n      var allData = {};\n\n      for (var f in fData) {\n        allData[f] = fData[f];\n      }\n\n      for (var s in sData) {\n        if (s in allData) allData[s] = allData[s].concat(sData[s]);else allData[s] = sData[s];\n      }\n\n      return allData;\n    }\n  }, {\n    key: \"updateZoom\",\n    value: function updateZoom(scale, f) {\n      var s = null,\n          e = null;\n\n      if (d3Selection.event.selection === null) {\n        this.resetZoom(f);\n        return;\n      }\n\n      var _d3Selection$event$se = d3Selection.event.selection.map(function (ele) {\n        return scale.invert(ele);\n      });\n\n      var _d3Selection$event$se2 = _slicedToArray(_d3Selection$event$se, 2);\n\n      s = _d3Selection$event$se2[0];\n      e = _d3Selection$event$se2[1];\n      s = moment(s);\n      e = moment(e);\n      this.setState({\n        start: s,\n        end: e\n      });\n    }\n  }, {\n    key: \"updateStart\",\n    value: function updateStart(date, f) {\n      this.setState({\n        start: moment(date)\n      }, f);\n    }\n  }, {\n    key: \"updateEnd\",\n    value: function updateEnd(date, f) {\n      this.setState({\n        end: moment(date)\n      }, f);\n    }\n  }, {\n    key: \"updateFrame\",\n    value: function updateFrame(frame, f) {\n      var start = this.state.start;\n      var end = this.state.end;\n\n      switch (frame) {\n        case \"1 day\":\n          end = moment(start).add(1, \"day\").isBefore(moment()) ? moment(start).add(1, \"day\") : end;\n          this.setState({\n            end: end\n          }, f);\n          break;\n\n        case \"1 week\":\n          end = moment(start).add(1, \"week\").isBefore(moment()) ? moment(start).add(1, \"week\") : end;\n          this.setState({\n            end: end\n          }, f);\n          break;\n\n        case \"1 month\":\n          end = moment(start).add(1, \"month\").isBefore(moment()) ? moment(start).add(1, \"month\") : end;\n          this.setState({\n            end: end\n          }, f);\n          break;\n\n        case \"Fall Semester\":\n          start = moment('2018-09-02');\n          end = moment('2018-12-15');\n          this.setState({\n            start: start,\n            end: end\n          }, f);\n          break;\n\n        case \"Spring Semester\":\n          start = moment('2019-01-25');\n          end = moment('2019-05-21');\n          this.setState({\n            start: start,\n            end: end\n          }, f);\n          break;\n\n        case \"All\":\n        default:\n          this.setState({\n            start: moment(\"2018-09-02\"),\n            end: moment(\"2019-05-21\")\n          }, f);\n          break;\n      }\n    }\n  }, {\n    key: \"filterStudent\",\n    value: function filterStudent(event) {\n      event.preventDefault();\n      var query = this.state.queryStudent;\n      if (query === \"\" || query === null || query === undefined) return this.state.initData;\n      var filteredData = {};\n\n      for (var prof in this.state.filteredData) {\n        filteredData[prof] = [];\n      }\n\n      for (var _prof in this.state.initData) {\n        var _iterator2 = _createForOfIteratorHelper(this.state.initData[_prof]),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var student = _step2.value;\n            if (student.name.toLowerCase().includes(query.toLowerCase())) filteredData[_prof].push(student);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      this.setState({\n        filteredData: filteredData,\n        queryTutor: \"\"\n      });\n    }\n  }, {\n    key: \"filterTutor\",\n    value: function filterTutor(event) {\n      event.preventDefault();\n      var query = this.state.queryTutor;\n      if (query === \"\" || query === null || query === undefined) return this.state.initData;\n      var filteredData = {};\n\n      for (var prof in this.state.filteredData) {\n        filteredData[prof] = [];\n      }\n\n      for (var _prof2 in this.state.initData) {\n        var _iterator3 = _createForOfIteratorHelper(this.state.initData[_prof2]),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var student = _step3.value;\n            if (student.tutor.toLowerCase().includes(query.toLowerCase())) filteredData[_prof2].push(student);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      this.setState({\n        filteredData: filteredData,\n        queryStudent: \"\"\n      });\n    }\n  }, {\n    key: \"resetFilter\",\n    value: function resetFilter(evt) {\n      evt.preventDefault();\n      d3Selection.select(\"#info\").classed('hideInfo', true);\n      this.setState({\n        filteredData: this.state.initData,\n        queryStudent: \"\",\n        queryTutor: \"\"\n      });\n    }\n  }, {\n    key: \"enterStudent\",\n    value: function enterStudent(evt) {\n      this.setState({\n        queryStudent: evt.target.value\n      });\n    }\n  }, {\n    key: \"enterTutor\",\n    value: function enterTutor(evt) {\n      this.setState({\n        queryTutor: evt.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var profData = [];\n      var numProfs = 0;\n      var fontStyles = \"     \\n        .fa,\\n        .fas {\\n            -moz-osx-font-smoothing: grayscale;\\n            -webkit-font-smoothing: antialiased;\\n            display: inline-block;\\n            font-style: normal;\\n            font-variant: normal;\\n            text-rendering: auto;\\n            line-height: 1;\\n            font-family: 'Font Awesome 5 Free';\\n            font-weight: 900; }\\n            \\n        @font-face {\\n            font-family: 'Font Awesome 5 Free';\\n            font-style: normal;\\n            font-weight: 400;\\n            font-display: auto;\\n            src: url(\\\"/FontAwesome/fa-regular-400.eot\\\");\\n            src: url(\\\"/FontAwesome/fa-regular-400.eot?#iefix\\\") format(\\\"embedded-opentype\\\"), url(\\\"/FontAwesome/fa-regular-400.woff2\\\") format(\\\"woff2\\\"), url(\\\"/FontAwesome/fa-regular-400.woff\\\") format(\\\"woff\\\"), url(\\\"/FontAwesome/fa-regular-400.ttf\\\") format(\\\"truetype\\\"), url(\\\"/FontAwesome/fa-regular-400.svg#fontawesome\\\") format(\\\"svg\\\"); \\n        }\\n        @font-face {\\n            font-family: 'Font Awesome 5 Free';\\n            font-style: normal;\\n            font-weight: 900;\\n            font-display: auto;\\n            src: url(\\\"/FontAwesome/fa-solid-900.eot\\\");\\n            src: url(\\\"/FontAwesome/fa-solid-900.eot?#iefix\\\") format(\\\"embedded-opentype\\\"), url(\\\"/FontAwesome/fa-solid-900.woff2\\\") format(\\\"woff2\\\"), url(\\\"/FontAwesome/fa-solid-900.woff\\\") format(\\\"woff\\\"), url(\\\"/FontAwesome/fa-solid-900.ttf\\\") format(\\\"truetype\\\"), url(\\\"/FontAwesome/fa-solid-900.svg#fontawesome\\\") format(\\\"svg\\\"); \\n        }  \\n            \\n            \";\n\n      for (var ele in this.state.filteredData) {\n        var prof = this.state.filteredData[ele];\n        var profInfo = ele.split(\" \");\n\n        var uc = __jsx(UseCaseRow, {\n          num: numProfs++,\n          data: prof,\n          name: profInfo[0],\n          lastName: profInfo[1],\n          key: ele,\n          start: this.state.start,\n          end: this.state.end,\n          width: 850,\n          styling: fontStyles\n        });\n\n        profData.push(uc);\n      }\n\n      var ucContainer = __jsx(\"div\", {\n        id: \"ucContainer\"\n      }, profData);\n\n      var info = __jsx(\"div\", {\n        id: \"info\",\n        className: \"hideInfo\"\n      });\n\n      var timeLine = __jsx(Timeframe, {\n        width: 850,\n        start: this.state.start,\n        end: this.state.end,\n        updateZoom: this.updateZoom,\n        updateEnd: this.updateEnd,\n        updateStart: this.updateStart,\n        setFrame: this.updateFrame,\n        data: this.state.filteredData,\n        key: \"Timeline\"\n      });\n\n      var filter = __jsx(\"div\", {\n        id: \"filter\"\n      }, \" \", __jsx(\"form\", {\n        onSubmit: this.filterStudent\n      }, \"Enter the Student Name: \", __jsx(\"input\", {\n        type: \"text\",\n        id: \"studentForm\",\n        value: this.state.queryStudent,\n        onChange: this.enterStudent\n      }), __jsx(\"input\", {\n        type: \"submit\"\n      }), \" \"), __jsx(\"form\", {\n        onSubmit: this.filterTutor,\n        onReset: this.resetFilter\n      }, \"Enter the Tutor Name:  \", __jsx(\"input\", {\n        type: \"text\",\n        id: \"tutorForm\",\n        value: this.state.queryTutor,\n        onChange: this.enterTutor\n      }), __jsx(\"input\", {\n        type: \"submit\"\n      }), \" \", __jsx(\"br\", null), __jsx(\"input\", {\n        type: \"reset\"\n      })));\n\n      var legend = __jsx(\"div\", {\n        id: \"legend\"\n      }, __jsx(\"h3\", null, \"LEGEND\"), __jsx(\"p\", null, \"Jeff: \", __jsx(FontAwesomeIcon, {\n        icon: faDragon\n      }), \"  Julia: \", __jsx(FontAwesomeIcon, {\n        icon: faCat\n      }), \" Bella: \", __jsx(FontAwesomeIcon, {\n        icon: faLemon\n      }), \"Alex: \", __jsx(FontAwesomeIcon, {\n        icon: faDog\n      }), \" Alan: \", __jsx(FontAwesomeIcon, {\n        icon: faCrow\n      }), \" Hari: \", __jsx(FontAwesomeIcon, {\n        icon: faCheese\n      }), \"Ilias: \", __jsx(FontAwesomeIcon, {\n        icon: faHippo\n      }), \" \"), __jsx(\"p\", null, \" Aashish: \", __jsx(FontAwesomeIcon, {\n        icon: faHorse\n      }), \"Gilad: \", __jsx(FontAwesomeIcon, {\n        icon: faFrog\n      }), \"Cindy: \", __jsx(FontAwesomeIcon, {\n        icon: faSpider\n      }), \" Santiago: \", __jsx(FontAwesomeIcon, {\n        icon: faBreadSlice\n      }), \"Rahul: \", __jsx(FontAwesomeIcon, {\n        icon: faFish\n      }), \" Jonathan: \", __jsx(FontAwesomeIcon, {\n        icon: faAppleAlt\n      }), \" \"), __jsx(\"br\", null), __jsx(\"p\", null, __jsx(\"span\", {\n        style: {\n          color: '#CF142B'\n        }\n      }, \"Red\"), \": Unresolved\", __jsx(\"span\", {\n        style: {\n          color: \"#FAD201\"\n        }\n      }, \"     Yellow\"), \": Partially Resolved\", __jsx(\"span\", {\n        style: {\n          color: \"#33A532\"\n        }\n      }, \"     Green\"), \": Resolved\"));\n\n      return __jsx(Bar, null, this.style, __jsx(Helmet, null, __jsx(\"title\", null, \"Tutor Timeline\")), __jsx(\"h1\", null, \"2018-2019 CS101 Tutoring Timeline\"), filter, legend, ucContainer, timeLine, info);\n    }\n  }]);\n\n  return Timeline;\n}(React.Component);\n\nexport default Timeline;","map":null,"metadata":{},"sourceType":"module"}